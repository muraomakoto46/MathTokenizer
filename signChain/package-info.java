/**
 *
 */
/**
 * @author MuraoMakoto
 * Chain of Responsibilityパターンを応用して、
 * ベルトコンベヤー方式で、
 * 単項演算子の-を加工する。
 * レゴブロックみたいで楽しいね。
 * 単項演算子の- をNに変換する。
 * 7*-7 は 7*7Nに変換する。
 * 63/-9 は 63/9Nに変換する。
 * 3.14*-4.92 = 3.14*4.92N
 * -9.8
 * 7-------9 は。7-9
 * 7------9  は、7+9
 * 9++++++8 は 9+8。
 * 7--7 = 7+7
 * 7+-7 = 7-7
 * 7-+7 = 7-7
 * 7/////////7は 7/7に変換する。
 * 7********7は 7*7に変換する。
 * 7*+/-3 = 7*+/3N
 *
 * 7*+3 = 7*(+3) とみなして、 7*3 とする。
 * だから *+があったら、* にする。
 * ／＋ は ／ にする。
 *
 * 7^-4 は 7^4Nに変換する。
 *
 * 開きかっこの直後の 「 - 」も変換する。
 *
 * (-4) は (4N) に変換する。
 * (-4+5) は (4N+5)に変換する。
 * なんで Nを数値の後ろに持ってくるんだ？
 * 後置型逆ポーランド方式を採用している。
 * そうすれば 伝統的なスタックを用いた演算方法にも応用できる。
 *
 * これらの複雑なルールをすべて実現するならifelseやswitchを用いてやるほうほうもあるけど
 * 管理が大変になるから、Chain of Responsibilityを採用すべきだ。
 *
 * 最も右端の - は、 Nに変換する。
 * -7 は 7N
 *
 * -(1+5) は (1+5)N
 *
 *
 * +(2-4) = (2-4)P = (-2)P = (2N)P = 2NP = 2N
 *
 * -(2-4) = (-2)N = (2N)N = 2NN =2P = 2
 *
 * --7 = -7N = 7NN = 7
 *
 * ---7= --7N = -7NN = -7 = 7N = -7
 * 
 * 7/^4 = 7/4
 * 7^^^^^^^^^^^^^^^^^^^^^^4 = 7^4
 * 7*^4 = 7*4
 */
package signChain;